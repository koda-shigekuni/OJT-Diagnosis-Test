openapi: '3.0.3'

info:
  title: 'Sample API'
  version: '1.0.0'

tags:
  - name: 'User'
    description: 'サンプルAPIです。'
  - name: 'Login'
    description: 'ログインの操作が記述されています。'
  - name: 'Home'
    description: 'HOME画面表示に関する操作が記述されています。'
  - name: 'Contents'
    description: 'コンテンツの操作(一覧・詳細・追加など)が記述されています。'
  - name: 'Category'
    description: 'カテゴリー取得操作が記述されています。'
  - name: 'Comment'
    description: 'コメントに関する操作(一覧・追加・編集など)が記述されています'
  - name: 'login'
    description: 'ログインの操作'
  - name: 'mypage'
    description: 'mypage画面表示に関する操作が記述されています。'
  - name: 'postUserImage'
    description: 'ユーザ画像変更操作'

paths:
  /api/v1/hello:
    get:
      summary: 'ユーザー情報取得'
      responses:
        '200':
          description: '成功'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/getHomeContents:
    get:
      tags: ['Home']
      summary: '注目コンテンツ一覧情報取得'
      description: '注目されているコンテンツの一覧を6件返します'
      responses:
        '200':
          description: |
            1. ユーザーログインチェック
            2. ユーザー情報及び人気コンテンツ6件情報を取得
              * 取得項目
                * ユーザー名
                * コンテンツ.ID
                * コンテンツ.タイトル
                * コンテンツ.要約
                * コメント数
                  * コメント.コンテンツIDの数
                * いいね数
                  * ライク.ライク数の合計

              *  結合条件
               * コメント.コンテンツID = コンテンツ.ID
               * ライク.種別 = 0: コンテンツ, ライク.ターゲットID = コンテンツ.ID
                 * 取得条件： ターゲットタイプ = コンテンツ, 登録区分 = 1 (公開)
               * コンテンツ.登録ユーザー = 社員マスタ.社員ID
              
              * 抽出条件
               * コンテンツ.登録区分 = 1(公開)
               * コンテンツ.表示フラグ = 0(表示)
               * 人気スコアの降順
               * 上位6件まで表示
              3. ユーザーアイコン取得
                * コンテンツの投稿者をキーとして該当するアイコンをminioから取得
              4. コンテンツサムネイル取得
                * 投稿したユーザーIDフォルダ/コンテンツIDと名の付くサムネイルをMinioから取得
              5. レスポンスボディ生成
                  - HomeResponceに準拠したJSONを生成
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HomeResponce'
        '401':
          description: 'セッションタイムアウト'
        '500':
          description: 'サーバー内部エラー'

  /api/getContents:
    get:
      tags: ['Contents']
      summary: 'コンテンツ一覧情報取得'
      description: '投稿されているコンテンツの一覧をページングして返します。'
      parameters:
        - name: pageNo
          in: query
          description: '取得したいページ番号'
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: contentsTitle
          in: query
          description: 'タイトル検索'
          required: false
          schema:
            type: string
        - name: categoryId
          in: query
          description: 'カテゴリー絞り込み(1:業界研究 / 2:技術トレンド / 3:案件紹介)'
          required: false
          schema:
            type: integer
            enum: [1, 2, 3]
            example: 1
        - name: postUser
          in: query
          description: '投稿者検索'
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: 'ソート順(0:新着順 / 1:いいねが多い順 / 2:コメントが多い順)'
          required: false
          schema:
            type: integer
            enum: [0, 1, 2]
            default: 0
            example: 0
        - name: sort_type
          in: query
          description: 'ソート検索(0:新着順 / 1:いいねが多い順 / 2:コメントが多い順)'
          schema:
            type: integer
            enum: [0, 1, 2]
            default: 0
            example: 0
      responses:
        '200':
          description: |
            1. ユーザーログインチェック
            2. ユーザー情報及びコンテンツ情報を取得
              * 取得項目
                * ユーザー名
                * コンテンツ.ID
                * コンテンツ.タイトル
                * コンテンツ.カテゴリID
                * コンテンツ.本文
                * コンテンツ.投稿日
                * コンテンツ.更新日
                * コメント数
                  * コメント.コンテンツIDの数
                * いいね数
                  * ライク.ライク数の合計

              * 結合条件
               * コメント.コンテンツID = コンテンツ.ID
               * ライク.種別 = 0: コンテンツ, ライク.ターゲットID = コンテンツ.ID
                 * 取得条件： ターゲットタイプ = コンテンツ, 登録区分 = 1 (公開)
               * コンテンツ.登録ユーザー = 社員マスタ.社員ID

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentsListResponse'
              examples:
                default:
                  $ref: '#/components/examples/ContentsListExample'
        '401':
          description: 'セッションタイムアウト'
        '500':
          description: 'サーバー内部エラー'

  /api/getContentsDetail:
    get:
      tags: ['Contents']
      summary: 'コンテンツ詳細取得'
      description: '指定されたIDのコンテンツ詳細を取得する'
      parameters:
        - name: contents_id
          in: query
          description: 'コンテンツID'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: |
            1. ユーザーログインチェック
            2. ユーザー情報及びコンテンツ情報を取得
              * 取得項目
                * ユーザー名
                * コンテンツ.ID
                * コンテンツ.タイトル
                * コンテンツ.カテゴリID
                * コンテンツ.本文
                * コンテンツ.投稿日
                * コンテンツ.更新日
                * コメント数
                  * コメント.コンテンツIDの数
                * いいね数
                  * ライク.ライク数の合計

              * 結合条件
                * ライク.種別 = 0: コンテンツ, ライク.ターゲットID = コンテンツ.ID
                * コメント.コンテンツID = コンテンツ.ID
                * コンテンツ.登録ユーザー = 社員マスタ.社員ID

              * 抽出条件
                * コンテンツ.ID = パラメータ.コンテンツID
                * コンテンツ.登録区分 = 1
            3. ユーザーアイコン取得
                * セッション.ユーザーIDをキーにminioからユーザーアイコンを取得
            4. コンテンツサムネイル取得
                * 投稿したユーザー名フォルダ/コンテンツIDとつく名前のサムネイルをminioからbase64で取得
            5. レスポンスボディ生成
                - ContentsDetailResponseに準拠したJSONを生成
                - contents_id, contents_title, contents_content, post_user, post_date, last_update_date, comment_count, favorite_count,category_id, をセット
                - thumbnail, user_imageはbase64でセット
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentDetailResponse'
        '401':
          description: 'セッションタイムアウト'
        '500':
          description: 'サーバー内部エラー'

  /api/getCategoryMst:
    get:
      tags: ['Category']
      summary: 'カテゴリー取得'
      description: 'カテゴリーの値を取得する'
      responses:
        '200':
          description: |
            1.カテゴリーの値を取得
             * 取得項目
               * カテゴリー.ID
               * カテゴリー.名前
               * カラーコード(例#F0F0F0)

             * 抽出条件
               * 公開区分 = 0(公開)
               * idで昇順
               
            3. レスポンスボディ生成
              - Categoriesに準拠したJSONを生成

          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Categories'
        '401':
          description: 'セッションタイムアウト'
        '500':
          description: 'サーバー内部エラー'

  /api/getComments:
    get:
      tags: ['Comment']
      summary: 'コメント一覧機能'
      description: 'コメント一覧を取得する'
      responses:
        '200':
          description: |
            1. ユーザーログインチェック
            2. ユーザー情報及びコメント情報取得
              * 取得項目
               * ユーザー名
               * コメント.ID
               * コメント.コンテンツID
               * コメント.本文
               * コメント.投稿日
               * コメント.更新日
               * いいね数
                * ライク.ライク数の合計

              * 結合条件
               * ライク.種別 = 1: コメント, ライク.ターゲット.ID
               * コンテンツ.登録ユーザー = 社員マスタ.社員ID
              
              * 抽出条件
               * コメント.コンテンツID = リクエストパラメータ.コンテンツID
               * コメント.登録区分 = 1
            3. レスポンスボディ生成
             - GetCommentsResponseに準拠したJSONを生成
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsResponse'
        '401':
          description: 'セッションタイムアウト'
        '500':
          description: 'サーバー内部エラー'

  /api/postComments:
    post:
      tags: ['Comment']
      summary: 'コメント機能'
      description: |
        ユーザーがコメントの操作(投稿・編集・削除)を
        まとめたエンドポイントです。
        actionに渡されたKeyによって処理を切り替えます。

        - **crate**: 新しいコメントを投稿します
        - **update**: 既存コメントを編集します
        - **delete**: 既存コメントを削除します。

      parameters:
        - name: action
          in: query
          description: |
            実行するアクションの種別
            - crate: コメント投稿
            - update: コメント編集
            - delete: コメント削除
          required: true
          schema:
            type: string

      requestBody:
        required: true
        description: |
          下記リクエスト例は「Examples」タブを参照してください
          - **crate**: コメント投稿例
          - **update**: コメント編集例
          - **delete**: コメント削除例
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/postCommentRequest'
                - $ref: '#/components/schemas/updateCommentRequest'
                - $ref: '#/components/schemas/deleteCommentRequest'
              discriminator:
                propertyName: action
                mapping:
                  postComment: '#/components/schemas/postCommentRequest'
                  updateComment: '#/components/schemas/updateCommentRequest'
                  deleteComment: '#/components/schemas/deleteCommentRequest'
            examples:
              postComment:
                summary: コメント投稿
                value:
                  contents_id: 1
                  comment_body: 'TESTCOMMENT'
                  post_date: '2025-01-01'
              updateComment:
                summary: コメント編集
                value:
                  comment_id: 2
                  comment_body: 'UPDATECOMMENT'
                  update_date: '2025-01-02'
                  update_count: 1
              deleteComment:
                summary: コメント削除
                value:
                  contents_id: 3
                  ent_kbn: 9
      responses:
        '201':
          description: |
            1. ユーザーログインチェック
            2. リクエスト検証
             * 必須投稿項目
              * コンテンツID
              * コメント本文
              * コメント登録ユーザー
              * コメント投稿日
             * 必須編集項目
              * コメントID
              * コメント本文
              * コメント更新ユーザー
              * コメント更新日
              * コメント更新カウント
             * 必須削除項目
              * コメントID
              * 登録区分
             * 制約
              * コメント本文: 最大300文字
            3. 対象コンテンツの存在/公開チェック
             * 登録時抽出条件
              * コンテンツ.ID = リクエストパラメータ.コンテンツID
              * コメント 登録区分 = 1(公開)
             * 編集時抽出条件
              * コメント.ID
              * コメント 登録区分 = 1(公開)
            4. コメント登録
             * 投稿保存項目
               * コメント.ID(自動採番)
               * コメント.コンテンツID = リクエストパラメータ.コンテンツID
               * コメント.本文 = リクエストパラメータ.コメント本文
               * コメント.登録ユーザー = セッション.ユーザーID
               * コメント.投稿日 = 投稿日時
            5. コメント編集
             * 編集保存項目
               * コメント.本文 = リクエストパラメーター.コメント本文
               * 更新ユーザー = セッション.ユーザーID
               * 更新日 = 更新日時
               * 更新数 = 1カウント
            6. コメント削除
             * 削除保存項目
              * 登録区分 = 9(非公開)
        '401':
          description: 'セッションタイムアウト'
        '500':
          description: 'サーバー内部エラー'

  /api/postContents:
    post:
      tags: ['Contents']
      summary: 'コンテンツ投稿/編集機能'
      description: |
        ユーザーがコンテンツの操作を
        まとめたエンドポイントです
        actionによって処理を切り替えます

        - **crate**： 新しい記事を投稿します
        - **update**： 既存の記事を編集します

      parameters:
        - name: action
          in: query
          description: |
            実行するアクションの種別
            - crate: コンテンツ投稿
            - update: コンテンツ編集
          required: true
          schema:
            type: string

      requestBody:
        required: true
        description: |
          下記のリクエスト例は「Examples」タブを参照してください
          - **crate**: コンテンツ投稿例
          - **update**: コンテンツ編集例
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AddContentsRequest'
                - $ref: '#/components/schemas/UpdateContentsRequest'
              discriminator:
                propertyName: action
                mapping:
                  postContents: '#/components/schemas/AddContentsRequest'
                  updateContents: '#/components/schemas/UpdateContentsRequest'
            examples:
              postContents:
                summary: コンテンツ投稿
                value:
                  category_id: 1
                  thumbnail: 'base64'
                  content_title: 'TESTTITLE'
                  contents_summary: 'TESTSUMMARY'
                  contents_content: JSON
                  post_date: '1985-08-09'
                  display_flag: 1
              updateContents:
                summary: コンテンツ編集
                value:
                  category_id: 2
                  thumbnail: 'base64'
                  content_title: 'UPDATETITLE'
                  contents_summary: 'UPDATESUMMARY'
                  contents_content: JSON
                  update_date: '2023-09-01'
                  update_count: 1
                  display_flag: 1
      responses:
        '201':
          description: |
            1. ユーザーログインチェック
            2. リクエスト検証
             * 必須投稿項目
               * コンテンツタイトル
               * コンテンツ要約
               * コンテンツ本文
               * カテゴリID
               * 投稿日
             * 必須編集項目 
               * コンテンツID
               * コンテンツタイトル
               * コンテンツ要約
               * コンテンツ本文
               * カテゴリID
               * 更新ユーザー
               * 更新日
               * 更新数
             * 任意項目
               * サムネイル画像
               * 本文画像
             * 制約条件
               * コンテンツタイトル：最大100文字
               * コンテンツ要約: 最大200文字
               * コンテンツ本文: 最大20000文字
               * サムネイル及び本文の画像サイズは5MBまで
            3. 対象コンテンツの存在/公開チェック
             * 抽出条件
               * コンテンツ.ID = リクエストパラメータ.コンテンツID
               * コンテンツ 公開区分 = 1(公開)
            4. コンテンツ: 記事の投稿
             * 投稿項目
               * コンテンツ.タイトル
               * コンテンツ.要約
               * コンテンツ.本文
               * コンテンツ.カテゴリID
               * コンテンツ.投稿ユーザー = セッション.ログインユーザー
               * コンテンツ.投稿日 = 投稿日時
             * 任意項目
               * サムネイル画像
               * 本文画像
            5. コンテンツ: 記事の更新
             * 更新項目
               * コンテンツ.タイトル
               * コンテンツ.要約
               * コンテンツ.本文
               * コンテンツ.カテゴリID
               * コンテンツ.更新ユーザー = セッション.ログインユーザー
               * コンテンツ.更新日 = 更新日時
               * コンテンツ.更新数 = 1カウント
             * 任意項目
               * サムネイル画像
               * 本文画像
            6. 画像の登録
             * サムネイル及び本文の画像はMinIOに保存

        '500':
          description: 'サーバー内部エラー'

  /api/postLike:
    post:
      tags: ['Like']
      summary: 'いいね機能'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postLikeRequest'
      responses:
        '201':
          description: |
            1.ログインチェック
            2.コンテンツのライクのリクエスト検証
            ＊必須項目
            ・コンテンツID
            ・ライクユーザ
            ・トータルライク(合計ライク数)
            ・ライク日
            ＊制約条件
            ・合計ライク数は1.5秒間に押されたライク数を一括でポスト

            3.コメントのライクのリクエスト検証
            ＊必須項目
            ・コメントID
            ・ライクユーザ
            ・トータルライク(合計ライク数)
            ・ライク日
            ＊制約条件
            ・合計ライク数は1.5秒間に押されたライク数を一括でポスト
        '401':
          description: '認証失敗'
        '500':
          description: 'サーバー内部エラー'

  /api/login:
    post:
      tags: ['Login']
      summary: 'ログイン'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: ログイン成功時
          headers:
            Set-Cookie:
              description: |
                1.リクエスト検証
                * 必須項目
                  * 社員番号.emp_id
                  * パスワード.paswd
                2.クッキーセット
                * 必須項目
                  * 社員番号.emp_id
                  * ログイン成功時、入力された社員番号を
                    クッキーに保存する

              schema:
                type: string
                example: 'session=abc123; Path=/;HttpOnly'
        '400':
          description: 'パラメータ不備'
        '401':
          description: '認証失敗'

  '/api/getMyPage':
    get:
      tags: ['mypage']
      summary: 'マイページ'
      responses:
        '200':
          description: |
            成功時、user,activityRecord,favoriteContentの要素検索して表示

            ランキング表示はコメント*10+ライクの数で抽出

            投稿したコンテンツが3つ以上ない場合、favoriteContentの以下項目をnullで返す
            - content_title
            - comment_count
            - like_count

            1.ユーザ情報及びTOP3コンテンツ取得
            *必須項目
              * 社員名
              * コンテンツ投稿数
              * 総ライク数
              * 最終投稿日
              * ユーザアイコン
              * コンテンツタイトル
              * コンテンツコメント数
              * コンテンツライク数

            * 統合条件
              * コンテンツ.投稿者 = セッション.社員ID
              * コンテンツ.登録区分 = 1

            * TOP3コンテンツのランキング
              * ライク数 + (コメント数 * 10)のトータルスコアが
              多い順に 3コンテンツまで表示

            * 抽出条件
              * user(ユーザ情報) = {
            ・社員ID = セッション.社員ID
            ・ユーザアイコン = セッション.社員ID
            }

              * activity(活動履歴) = {
            ・コンテンツID = セッション.社員ID
            ・ライクユーザ = セッション.社員ID
            }

              * favorite(TOP3コンテンツ) = {
            ・コンテンツID = セッション.社員ID
            ・コンテンツID = ライク.ターゲットID
            }

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserInfo'
        '500':
          description: 'サーバー内部エラー'

  '/api/getMyContents':
    get:
      tags: ['MyContents']
      summary: '自分が投稿したコンテンツ一覧を取得'
      parameters:
        - name: sort_type
          in: query
          description: 'ソート検索(0:新着順 / 1:古い順)'
          schema:
            type: integer
            default: 0
            example: 0
      responses:
        '200':
          description: |
            1.ユーザが投稿したコンテンツを取得
            * 取得項目
              * コンテンツタイトル
              * コンテンツ要約
              * コンテンツ投稿日
              * コメント数
              * ライク数
              * カテゴリー名

            * 統合条件
              * ライク.種別 = 1: コンテンツ, ライク.ターゲット.ID
              * コンテンツ.登録ユーザー = 社員マスタ.社員ID

            * 抽出条件
              * コンテンツ.投稿者 = セッション.社員番号ID
              * コンテンツ.登録区分 = 1

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mypageContents'
              examples:
                default:
                  $ref: '#/components/examples/mypageContentsExample'
        '401':
          description: '認証失敗'
        '500':
          description: 'サーバー内部エラー'

  '/api/postUserImage':
    post:
      tags: ['postUserImage']
      summary: 'ユーザ画像アップロード'
      description: |
        ユーザーのプロフィール画像をBase64形式でアップロードします。  
        成功時は画像ファイル名を返却します。

        1.リクエスト検証
        * 必須項目
          * セッション.社員ID
          * 設定するプロフィール画像

        2.対象ユーザの画像存在チェック
        * 抽出条件
          * ファイル名 =セッション.社員ID

        3.画像削除
        * ユーザの画像が既に設定されている場合
          古い画像を削除しアップロード処理に入る
        * 削除対象
          * ファイル名 = user_/セッション.社員ID

        4.画像アップロード
        * 保存項目
          * 設定画像 = user_/セッション.社員ID

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserImageRequest'

      responses:
        '200':
          description: アップロード成功
        '400':
          description: リクエスト形式不備
        '500':
          description: 'サーバー内部エラー'

  '/api/getAdminContent':
    get:
      tags: ['AdminContent']
      summary: 'コンテンツ一覧(管理者)'
      parameters:
        - name: page_no
          in: query
          description: '取得したいページ番号'
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: display_type
          in: query
          description: '掲載ステータス検索(0:掲載中 / 1:掲載停止)'
          schema:
            type: integer
            enum: [0, 1]
            default: 0
            example: 0
        - name: contents_title
          in: query
          description: 'タイトル検索'
          schema:
            type: string
        - name: category
          in: query
          description: 'カテゴリー検索'
          schema:
            type: string
        - name: post_user
          in: query
          description: '投稿者検索'
          schema:
            type: string
        - name: sort_type
          in: query
          description: 'ソート検索(0:新着順 / 1:古い順)'
          schema:
            type: integer
            enum: [0, 1]
            default: 0
            example: 0
      responses:
        '200':
          description: |
            1. ユーザーログインチェック
            2. ユーザー情報及びコンテンツ情報を取得
              * 取得項目
                * ユーザー名
                * コンテンツ.ID
                * コンテンツ.タイトル
                * コンテンツ.カテゴリID
                * コンテンツ.投稿日
                * コンテンツ.更新日
                * コンテンツ掲載ステータス

              * 結合条件
                * コンテンツ.登録ユーザー = 社員マスタ.社員ID
                * カテゴリー名 = コンテンツ.カテゴリID

              * 抽出条件
                * コンテンツ.登録区分 = 1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminContent'
              examples:
                default:
                  $ref: '#/components/examples/AdminContentsListResponse'
        '401':
          description: '認証失敗'
        '500':
          description: 'サーバー内部エラー'

  '/api/admin/getContentDetail':
    get:
      tags: ['AdminContentDetail']
      summary: 'コンテンツ詳細画面(管理者)'
      parameters:
        - name: content_id
          in: query
          description: '押下されたコンテンツIDを取得'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: |
            1. ユーザーログインチェック
            2. ユーザー情報及びコンテンツ情報を取得
              * 取得項目
                * ユーザー名
                * コンテンツ.ID
                * コンテンツ.タイトル
                * コンテンツ.カテゴリID
                * コンテンツ.本文
                * コンテンツ.投稿日
                * コンテンツ.更新日
                * コメント数
                  * コメント.コンテンツIDの数
                * いいね数
                  * ライク.ライク数の合計
                * コンテンツ掲載ステータス

              * 結合条件
                * ライク.種別 = 0: コンテンツ, ライク.ターゲットID = コンテンツ.ID
                * コメント.コンテンツID = コンテンツ.ID
                * コンテンツ.登録ユーザー = 社員マスタ.社員ID

              * 抽出条件
                * コンテンツ.ID = パラメータ.コンテンツID
                * コンテンツ.登録区分 = 1
            3. ユーザーアイコン取得
                * セッション.ユーザーIDをキーにminioからユーザーアイコンを取得
            4. コンテンツサムネイル取得
                * 投稿したユーザー名フォルダ/コンテンツIDとつく名前のサムネイルをminioからbase64で取得
            5. レスポンスボディ生成
                - ContentsDetailResponseに準拠したJSONを生成
                - contents_id, contents_title, contents_content, post_user, post_date, last_update_date, comment_count, favorite_count,category_id, をセット
                - thumbnail, user_imageはbase64でセット
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminContentDetailListResponse'
              examples:
                default:
                  $ref: '#/components/examples/AdminContentDetailListResponse'
        '401':
          description: '認証失敗'
        '500':
          description: 'サーバー内部エラー'

  '/api/admin/contentDisplayChange':
    post:
      tags: [AdminContentDisplayChange]
      parameters:
        - name: display_type
          in: query
          description: '0:掲載中 / 1:掲載停止'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminContentDisplayChange'
      responses:
        '201':
          description: 表示切替成功
        '400':
          description: リクエスト形式不備
        '500':
          description: 'サーバー内部エラー'

  '/api/admin/commentDelete':
    post:
      tags: [AdminCommentDelete]
      parameters:
        - name: ent_kbn
          in: query
          description: '0:掲載中 / 1:掲載停止'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCommentDisplayChange'
      responses:
        '201':
          description: 表示切替成功
        '400':
          description: リクエスト形式不備
        '500':
          description: 'サーバー内部エラー'

  '/api/admin/getUserList':
    get:
      tags: [AdminUserList]
      summary: 'ユーザー一覧(管理者)'
      parameters:
        - name: page_no
          in: query
          description: '取得したいページ番号'
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: is_admin_hub
          in: query
          description: '管理者ステータス検索(0:一般 / 1:管理者)'
          schema:
            type: integer
            default: 0
            example: 0
        - name: emp_name
          in: query
          description: 'ユーザー名検索'
          schema:
            type: string
      responses:
        '200':
          description: |
            検索条件をもとに全てのユーザー一覧を取得する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserList'
              examples:
                default:
                  $ref: '#/components/examples/AdminUserListResponse'
        '401':
          description: '認証失敗'
        '500':
          description: 'サーバー内部エラー'

  '/api/admin/roleChange':
    post:
      tags: [AdminRoleChange]
      summary: 'ユーザに管理者権限を変更'
      description: |
        ユーザーの管理者権限を変更します。
      parameters:
        - name: is_admin_hub
          in: query
          description: '0:一般 / 1:管理者'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRoleChange'
      responses:
        '201':
          description: 管理者権限変更成功
        '400':
          description: リクエスト形式不備
        '500':
          description: 'サーバー内部エラー'

  '/api/admin/getCategory':
    get:
      tags: ['AdminCategory']
      summary: 'カテゴリ一覧(管理者)'
      parameters:
        - name: page_no
          in: query
          description: '取得したいページ番号'
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: display_type
          in: query
          description: '表示ステータス検索(0:表示中 / 1:非表示)'
          schema:
            type: integer
            enum: [0, 1]
            default: 0
            example: 0
        - name: category_name
          in: query
          description: 'カテゴリ検索'
          schema:
            type: string

      responses:
        '200':
          description: |
            検索条件をもとに1ページ分のカテゴリーを取得する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminCategory'
              examples:
                default:
                  $ref: '#/components/examples/AdminCategoryListResponse'
        '401':
          description: '認証失敗'
        '500':
          description: 'サーバー内部エラー'

  '/api/admin/postCategory':
    post:
      tags: ['AdminpostCategory']
      summary: 'カテゴリー追加/編集/表示ステータス変更(管理者)'
      description: |
        管理者がカテゴリーを操作するエンドポイントです。  
        actionにより処理を切り替えます。

        - **add**: 新しいカテゴリーを追加します。  
        - **update**: 既存のカテゴリー名を編集します。  
        - **changeDisplay**: 表示/非表示ステータスを変更します。

      parameters:
        - name: action
          in: query
          description: |
            実行するアクション種別  
            - add: カテゴリー追加  
            - update: カテゴリー名編集  
            - changeDisplay: 表示/非表示変更
          required: true
          schema:
            type: string

      requestBody:
        required: true
        description: |
          下記のレスポンス例は「Examples」タブに3種類用意されています。  
          - **add**: カテゴリー追加の例  
          - **update**: カテゴリー名編集の例  
          - **changeDisplay**: 表示/非表示切り替えの例
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AddCategoryRequest'
                - $ref: '#/components/schemas/EditCategoryRequest'
                - $ref: '#/components/schemas/ChangeDisplayRequest'
              discriminator:
                propertyName: action
                mapping:
                  addCategory: '#/components/schemas/AddCategoryRequest'
                  editCategory: '#/components/schemas/EditCategoryRequest'
                  changeDisplay: '#/components/schemas/ChangeDisplayRequest'
            examples:
              addCategory:
                summary: カテゴリー追加
                value:
                  category_name: 'デザイン'
              editCategory:
                summary: カテゴリー編集
                value:
                  category_id: 1
                  category_name: 'デザイン'
              changeDisplay:
                summary: 表示/非表示変更
                value:
                  category_id: 1
                  display_type: 1

      responses:
        '201':
          description: 成功
        '400':
          description: リクエスト形式不備
        '500':
          description: サーバー内部エラー
  '/api/common/getUserInfo':
    get:
      tags: ['getUserInfo']
      summary: '管理者判定/ログインユーザのアイコン取得'
      responses:
        '200':
          description: |
            ユーザの管理者判定を行い
            セッションIDでアイコンを取得
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonGetUserInfo'
              examples:
                default:
                  $ref: '#/components/examples/commonGetUserInfoExample'
        '401':
          description: '認証失敗'
        '500':
          description: 'サーバー内部エラー'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
    commonGetUserInfo:
      type: object
      properties:
        emp_id:
          type: string
          example: js0000
        is_admin_hub:
          type: string
          description: '1: 管理者, 2: 一般'
          example: '1'
        icon_base64:
          type: string
          nullable: true
          description: 'ユーザーアイコン(Base64形式, data URI付き)'
          example: 'data:image/jpeg;base64,...'
      required: [id, name]

    Login:
      type: object
      required: [emp_id, emp_passwd]
      properties:
        emp_id:
          type: string
          example: js0000
        emp_passwd:
          type: string
          example: password

    HomeResponce:
      type: object
      required:
        - contents_id
        - contents_title
        - contents_summary
        - comment_count
        - favorite_count
        - post_user
        - category
      properties:
        contents_id:
          type: integer
          example: 1
        thumbnail:
          type: string
          example: 'base64'
        contents_title:
          type: string
          example: '自己愛動画の作り方'
        contents_summary:
          type: string
          example: 'あなたはとってもポテトサラダ'
        comment_count:
          type: integer
          example: 40
        favorite_count:
          type: integer
          example: 2613
        user_image:
          type: string
          example: 'base64'
        post_user:
          type: string
          example: 'test5272'
        category:
          type: integer
          example: 1

    Categories:
      type: object
      required: [category_id, category_label, color_code]
      properties:
        category_id:
          type: integer
          example: 1
        category_label:
          type: string
          example: '業界研究'
        color_code:
          type: string
          example: '#198589'

    GetCommentsResponse:
      type: object
      required:
        - comment_id
        - comment_body
        - post_user
        - add_date
      properties:
        comment_id:
          type: integer
          example: 1
        comment_body:
          type: string
          example: 'EXAMPLECOMMENT'
        post_user:
          type: string
          example: 'js0000'
        add_date:
          type: string
          format: date-time
          example: '2025-07-29'
        update_date:
          type: string
          format: date-time
          example: '2025-08-01'
        favorite_count:
          type: integer
          example: 53

    postCommentRequest:
      type: object
      required:
        - contents_id
        - comment_body
      properties:
        contents_id:
          type: integer
          example: 1
        comment_body:
          type: string
          example: 'EXAMPLECOMMENT'
    updateCommentRequest:
      type: object
      required:
        - comment_id
        - comment_body
        - update_user
        - update_date
        - update_count
      properties:
        comment_id:
          type: integer
          example: 1
        comment_body:
          type: string
          example: 'UPDATECOMMENT'
        update_user:
          type: string
          example: 'js0000'
        update_date:
          type: string
          format: date-time
          example: '2025-01-01'
        update_count:
          type: integer
          example: 1
    deleteCommentRequest:
      type: object
      required:
        - comment_id
        - ent_kbn
      properties:
        comment_id:
          type: integer
          example: 1
        ent_kbn:
          type: integer
          example: 9

    Contents:
      type: object
      required:
        - contents_id
        - contents_title
        - contents_summary
        - comment_count
        - favorite_count
        - total_contents_count
        - post_user
        - last_update_date
        - category
      properties:
        contents_id:
          type: integer
          example: 1
        thumbnail:
          type: string
          example: 'base64'
        contents_title:
          type: string
          example: '「寝方ミスった」ということの内容'
        contents_summary:
          type: string
          example: '寝方ミス'
        last_update_date:
          type: string
          format: date-time
          example: '2023-12-19'
        comment_count:
          type: integer
          example: 53
        favorite_count:
          type: integer
          example: 53
        total_contents_count:
          type: integer
          example: 60
        user_image:
          type: string
          example: 'base64'
        post_user:
          type: string
          example: '1985-0809-A'
        category:
          type: integer
          example: 1

    ContentDetailResponse:
      type: object
      required:
        - contents_id
        - contents_title
        - contents_content
        - comment_body
        - post_user
        - post_date
        - last_update_date
        - comment_count
        - favorite_count
        - category_id
        - isLiked
      properties:
        contents_id:
          type: integer
          example: 53
        thumbnail:
          type: string
          example: 'base64'
        contents_title:
          type: string
          example: 'キャラクター人気投票 第53位'
        contents_content:
          type: string
          example: '私の大切な1562時間を奪った罪な奴です'
        comment_body:
          type: string
          example: 'お願いがあるんだなぁ～'
        post_user:
          type: string
          example: 'TDA'
        user_image:
          type: string
          example: 'base64'
        post_date:
          type: string
          format: date-time
          example: '2020-02-29'
        last_update_date:
          type: string
          format: date-time
          example: '2020-03-01'
        comment_count:
          type: integer
          example: 53
        favorite_count:
          type: integer
          example: 53
        category_id:
          type: integer
          example: 1
        isLiked:
          type: string
          format: varchar(1)
          example: '0'

    ContentsListResponse:
      type: object
      required: [total_page_count, data]
      properties:
        total_page_count:
          type: integer
          description: '総ページ数'
          example: 10
        data:
          type: array
          description: 'コンテンツ一覧データ'
          items:
            $ref: '#/components/schemas/Contents'

    AddContentsRequest:
      type: object
      required:
        - category_id
        - contents_title
        - contents_summary
        - contents_content
        - post_date
        - display_flag
      properties:
        category_id:
          type: integer
          example: 1
        thumbnail:
          type: string
          example: 'base64'
        contents_title:
          type: string
          example: '頑張れば大丈夫だから頑張ろう'
        contents_summary:
          type: string
          example: 'オッケオッケ！'
        contents_image:
          type: string
          example: 'base64'
        contents_content:
          type: string
          example: 'TEST_CONTENTS'
        post_date:
          type: string
          format: date-time
          example: '2025-08-09'
        display_flag:
          type: integer
          description: '0: 下書き / 1: 公開'
          enum: [0, 1]
          example: 0

    UpdateContentsRequest:
      type: object
      required:
        - contents_id
        - category_id
        - contents_title
        - contents_summary
        - contents_content
        - display_flag
      properties:
        contents_id:
          type: integer
          example: 2
        category_id:
          type: integer
          example: 1
        thumbnail:
          type: string
          example: 'base64'
        contents_title:
          type: string
          example: 'ハウハウ～'
        contents_summary:
          type: string
          example: 'TESTSUMMARY'
        contents_image:
          type: string
          example: 'base64'
        contents_content:
          type: string
          example: 'TEST_CONTENTS'
        update_date:
          type: string
          format: date-time
          example: '2025-08-09'
        display_flag:
          type: integer
          description: '0: 下書き / 1: 公開'
          enum: [0, 1]
          example: 0

    postLikeRequest:
      type: object
      required:
        - target_type
        - target_id
        - total_count
      properties:
        target_type:
          type: integer
          example: 0
        target_id:
          type: integer
          example: 1
        total_count:
          type: integer
          example: 10

    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: integer
          description: 'エラーコード'
        message:
          type: string
          description: 'エラーメッセージ詳細'

    AdminContent:
      type: object
      required:
        - contents_title
        - last_update_date
        - total_contents_count
        - post_user
        - category
      properties:
        display_type:
          type: integer
          example: 0
        contents_title:
          type: string
          example: 'インナーチャイルドとは'
        category_id:
          type: integer
          example: 1
        post_user:
          type: string
          example: 'テスト'
        last_update_date:
          type: string
          format: date-time
          example: '2023-12-19'
        total_contents_count:
          type: integer
          example: 60
    AdminContentsListResponse:
      type: object
      required:
        - total_page_count
        - data
      properties:
        total_page_count:
          type: integer
          description: '総ページ数'
          example: 10
        data:
          type: array
          description: 'コンテンツ一覧データ'
          items:
            $ref: '#/components/schemas/AdminContent'

    AdminUserList:
      type: object
      required:
        - page_no
        - total_user_count
        - is_admin_hub
        - emp_name
        - emp_id
      properties:
        page_no:
          type: integer
          example: 1
        total_user_count:
          type: integer
          example: 20
        is_admin_hub:
          type: integer
          example: 1
        emp_name:
          type: string
          example: 'テスト'
        emp_id:
          type: string
          example: 'js0000'
    AdminUserListResponse:
      type: object
      required:
        - total_user_count
        - data
      properties:
        total_user_count:
          type: integer
          description: '総ページ数'
          example: 10
        data:
          type: array
          description: 'ユーザー一覧データ'
          items:
            $ref: '#/components/schemas/AdminUserList'
    AdminContentDetailList:
      type: object
      required:
        - content_id
        - user_image
        - emp_name
        - title
        - add_date
        - upd_date
        - summary
        - content
        - content_image
        - display_type
        - body
        - last_post_date
      properties:
        content_id:
          type: integer
          example: 1
        user_image:
          type: integer
          example: 1209
        emp_name:
          type: string
          example: 'テストユーザ'
        title:
          type: string
          example: 'テストタイトル'
        add_date:
          type: string
          example: '2025/5/5'
        upd_date:
          type: string
          example: '2025/5/5'
        summary:
          type: string
          example: 'テストサマリー'
        content:
          type: string
          example: 'テストコンテンツ'
        content_image:
          type: integer
          example: 1
        display_type:
          type: string
          example: '掲載中'
        body:
          type: string
          example: 'テストコメント'
        last_post_date:
          type: string
          example: '2025/5/5'
    AdminContentDetailListResponse:
      type: object
      required:
        - content_data
        - comment_data
      properties:
        content_data:
          $ref: '#/components/schemas/AdminContentDetailList'
        comment_data:
          type: array
          description: 'コメント一覧データ'
          items:
            type: object
            properties:
              comment_id:
                type: integer
                example: 1
              comment_body:
                type: string
                example: 'テストコメント'
              comment_user:
                type: string
                example: 'テストユーザ'
              last_post_date:
                type: string
                example: '2025/05/05'

    getUserInfo:
      type: object
      required:
        - user
        - activityRecord
        - favoriteContent
      properties:
        user:
          $ref: '#/components/schemas/user'
        activityRecord:
          $ref: '#/components/schemas/activityRecord'
        favoriteContent:
          $ref: '#/components/schemas/favoriteContent'

    user:
      type: object
      required:
        - emp_name
      properties:
        emp_name:
          type: string
          example: 'テスト'
        user_image:
          type: string
          example: 'user-image'

    activityRecord:
      type: object
      required:
        - content_count
        - like_count
        - last_post_date
      properties:
        content_count:
          type: integer
          example: 10
        like_count:
          type: integer
          example: 420
        last_post_date:
          type: string
          example: '2025/07/24'

    favoriteContent:
      type: array
      items:
        type: object
        required:
          - rank
          - content_title
          - comment_count
          - like_count
        properties:
          rank:
            type: integer
            enum: [1, 2, 3]
            example: 1
          content_title:
            type: string
            example: 'デザインについて'
          comment_count:
            type: integer
            example: 53
          like_count:
            type: integer
            example: 1153

    PostUserImageRequest:
      type: object
      required:
        - user_image
      properties:
        user_image:
          type: string
          description: 'Base64エンコードされた画像データ'
          example: 'data:image/png;base64'

    AdminCategory:
      type: object
      required:
        - display_type
        - category_name
        - last_update_date
        - total_count
      properties:
        category_id:
          type: integer
          example: 1
        display_type:
          type: integer
          example: 0
        category_name:
          type: string
          example: '業界研究'
        last_update_date:
          type: string
          format: date-time
          example: '2023/12/19'
        total_count:
          type: integer
          example: 10

    mypageContents:
      type: object
      required:
        - total_page_count
        - data
      properties:
        total_page_count:
          type: integer
          description: '総ページ数'
          example: 2
        data:
          type: array
          description: '自分が投稿したコンテンツ一覧'
          items:
            $ref: '#/components/schemas/myContent'

    myContent:
      type: object
      required:
        - last_post_date
        - title
        - summary
        - total_comment
        - total_like
        - category_name
      properties:
        last_post_date:
          type: string
          example: '2025/09/09'
        title:
          type: string
          example: 'デザインについて'
        summary:
          type: string
          example: 'デザインについての感想'
        total_comment:
          type: integer
          example: 30
        total_like:
          type: integer
          example: 300
        category_name:
          type: string
          example: '業界研究'

    AdminCategoryListResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          description: 'カテゴリ一覧データ'
          items:
            $ref: '#/components/schemas/AdminCategory'

    AddCategoryRequest:
      type: object
      required:
        - category_name
      properties:
        category_name:
          type: string
          example: 'デザインについて'

    EditCategoryRequest:
      type: object
      required:
        - category_id
        - category_name
      properties:
        category_id:
          type: integer
          example: 1
        category_name:
          type: string
          example: 'デザインとは'

    ChangeDisplayRequest:
      type: object
      required:
        - category_id
        - display_type
      properties:
        category_id:
          type: integer
          example: 1
        display_type:
          type: integer
          enum: [0, 1]
          description: '0: 表示中, 1: 非表示'
          example: 1

    AdminRoleChange:
      type: object
      required:
        - is_admin_hub
      properties:
        is_admin_hub:
          type: string
          description: '管理者権限変更'
          example: '1'
    AdminContentDisplayChange:
      type: object
      required:
        - content_id
        - display_type
      properties:
        content_id:
          type: string
          description: 'コンテンツID'
          example: 1
        display_type:
          type: string
          description: '表示切替'
          example: '1'
    AdminCommentDisplayChange:
      type: object
      required:
        - comment_id
      properties:
        comment_id:
          type: string
          description: 'コメントID'
          example: 1

  examples:
    ContentsListExample:
      summary: '正常レスポンス例'
      value:
        total_page_count: 10
        data:
          - contents_id: 1
            thumbnail: 'base64'
            contents_title: 'TEST TITLE'
            contents_summary: 'SUMMARY'
            last_update_date: '2013-7-29'
            category_name: '業界研究'
            comment_count: 3
            favorite_count: 5
            user_image: 'base64'
            post_user: '1985-0809-A'
            category: 1
          - contents_id: 2
            thumbnail: 'base64'
            contents_title: '寝方ミスった…'
            contents_summary: 'SUMMARY2'
            last_update_date: '2023-11-10T00:00:00Z'

            comment_count: 1
            favorite_count: 2
            user_image: 'base64'
            post_user: 'Katudon1985'
            category: 2
    mypageContentsExample:
      summary: '自分の投稿コンテンツ一覧 正常レスポンス例'
      value:
        total_page_count: 2
        data:
          - last_post_date: '2025/09/09'
            title: 'デザインについて'
            summary: 'デザインについての感想'
            comment_count: 30
            like_count: 300
            category_name: '業界研究'
          - last_post_date: '2025/09/01'
            title: '技術トレンドまとめ'
            summary: '最新技術のまとめ記事'
            comment_count: 15
            like_count: 120
            category_name: '技術トレンド'
    AdminContentsListResponse:
      summary: '正常レスポンス例'
      value:
        total_page_count: 10
        data:
          - contents_id: 1
            display_type: 0
            contents_title: 'インナーチャイルドとは'
            post_user: 'Katudon1985'
            last_update_date: '2013-7-29'
            category_id: 1
          - contents_id: 2
            display_type: 1
            contents_title: '寝方ミスった…'
            post_user: 'Katudon1985'
            last_update_date: '2023-11-10'
            category_id: 2
        favoriteContent:
          - rank: 1
            content_title: 'デザインについて'
            comment_count: 53
            like_count: 1153
          - rank: 2
            content_title: 'デザインについて'
            comment_count: 53
            like_count: 53
          - rank: 3
            content_title: 'デザインについて'
            comment_count: 3
            like_count: 3
    AdminUserListResponse:
      summary: '正常レスポンス例'
      value:
        total_user_count: 20
        data:
          - emp_id: js0000
            is_admin_hub: 0
            emp_name: 'テスト1'
          - emp_id: js0000
            is_admin_hub: 1
            emp_name: 'テスト2'
          - emp_id: js0000
            is_admin_hub: 0
            emp_name: 'テスト3'

    AdminCategoryListResponse:
      summary: '正常レスポンス例'
      value:
        total_count: 10
        data:
          - category_id: 1
            display_type: 0
            category_name: '業界研究'
            last_update_date: '2013/7/29'
          - category_id: 2
            display_type: 0
            category_name: 'ITトレンド'
            last_update_date: '2013/7/29'
    AdminContentDetailListResponse:
      summary: '正常レスポンス例'
      value:
        contents_data:
          contents_id: 1
          user_image: 1209
          content_user: 'テストユーザ'
          title: 'テストタイトル'
          add_date: '2025/05/05'
          upd_date: '2025/05/05'
          category_name: '業界研究'
          summary: 'テストサマリー'
          content: 'テストコンテンツ'
          contents_image: 1
          display_type: '掲載中'
          like_count: 200
          comment_count: 2
        comments_data:
          - comment_id: 1
            comment_body: 'テストコメント1'
            comment_user: 'ユーザA'
            last_post_date: '2025/05/06'
            like_count: 200
          - comment_id: 2
            comment_body: 'テストコメント2'
            comment_user: 'ユーザB'
            last_post_date: '2025/05/07'
            like_count: 200
    commonGetUserInfoExample:
      summary: '正常レスポンス例'
      value:
        is_admin_hub: '1'
        image: 'data:image/jpeg;base64,...'
